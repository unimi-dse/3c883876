#' @title Probability of Stock's future price
#'
#' @description The package help to predict stock's future price.
#'
#' @param 'GOOG'
#'
#' @return NULL
#'
#' @examples stocks_future_price('GOOG')
#'
#' @export

stocks_future_price<-function(GOOG)
{
  #To ignore the warnings during usage
  options(warn=-1)
  options("getSymbols.warning4.0"=FALSE)
  # recall Google quotes
  data <- getSymbols(Symbols = 'GOOG', src = 'yahoo', auto.assign = FALSE)
  tail(data)

  # importing price data
  data<-data.frame(xts::as.xts(data))

  # attributed the column names
  colnames(data) <- c("data.Open","data.High","data.Low","data.Close","data.Volume","data.Adjusted")

  # creating lag and lead features of price column
  data <- xts::xts(data,order.by=as.Date(rownames(data)))
  data <- as.data.frame(merge(data, lm1=stats::lag(data[,'data.Adjusted'],c(-1,1,3,5,10))))

  # features
  data$Date<-as.Date(rownames(data))
  data$Day_of_month<-as.integer(format(as.Date(data$Date),"%d"))
  data$Month_of_year<-as.integer(format(as.Date(data$Date),"%m"))
  data$Year<-as.integer(format(as.Date(data$Date),"%y"))
  data$Day_of_week<-as.factor(weekdays(data$Date))

  # changing name of the variables
  Day_of_month<-data$Day_of_month
  Month_of_year<-data$Month_of_year
  Year<-data$Year
  Day_of_week<-data$Day_of_week

  head(data)


  # plot data using data.Open
  plot(data[, "data.Open"], main = "data")

  # plot data using day of week and low data
  ggplot(data, aes(Day_of_week, data.Low)) +
    geom_point(na.rm=TRUE, color="blue", size=3, pch=18)
  #plot data using Year and High data
  ggplot(data, aes(data.High, Year)) +
    geom_point(na.rm=TRUE, color="red", size=3, pch=18)


  # naming variables for reference
  today <- 'data.Adjusted'
  tommorow <- 'data.Adjusted.5'

  # building outcome
  data$up_down <- as.factor(ifelse(data[,tommorow] > data[,today], 1, 0))

  # building train and test sets
  train<-data[stats::complete.cases(data),]
  test<-data[nrow(data),]

  # training model
  model<-stats::glm(up_down~data.Open+data.High+data.Low+data.Close+
                      data.Volume+data.Adjusted+data.Adjusted.1+
                      data.Adjusted.2+data.Adjusted.3+data.Adjusted.4+
                      Day_of_month+Month_of_year+Year+Day_of_week,
                    family=binomial(link='logit'),data=train)

  # making Predictions
  pred<-as.numeric(stats::predict(model,test[,c('data.Open','data.High','data.Low','data.Close','data.Volume','data.Adjusted','data.Adjusted.1','data.Adjusted.2','data.Adjusted.3','data.Adjusted.4','Day_of_month','Month_of_year','Year','Day_of_week')],type = 'response'))

  # printing results
  print("Probability of Stock price going up tommorow:")
  print(pred)

}
